----
NEWS
----




High-level information about changes and progress of the project.




2023.01.XX

 - New public release: hello-0.3.0.

 - Internal changes and improvements to code parsing CSS (mostly to code
   parsing CSS declarations.

 - Replacing occurrences of "Dillo" with new name of the program in help
   document available from program's UI.

 - SSL is enabled by default (see "--enable-ssl" flag for ./configure). Be
   aware that support for SSL is in ALPHA stage. Don't rely on security of
   SSL in this program.




2022.10.14

 - New public release: hello-0.2.0.

 - Name of the project has been changed in many (but not all yet) places from
   dillo to hello. This includes the name of main binary and the name in HTTP
   User Agent.

 - Contents of default page displayed by the browser has been updated.

 - Clear compilation and installation instructions are added to README.

 - The program no longer depends on dillo or its instance of dpid.

 - Refactoring of Haskell code.

 - Partial support for "font" CSS property has been re-introduced.

 - Haskell code is now being compiled with -Wall -Wno-missing-signatures, and
   causes of all warnings are fixed.

 - Applying Debian's fix-OpenSSL-1.1-detection.patch patch.




2022.08.18

 - First public release: hello-0.1.0.

 - Haskell is used mostly in CSS code. Not all CSS code is being rewritten in
   Haskell yet. Some CSS functionality has been disabled or limited (e.g.
   @media, @import), and will be re-implemented later.

 - Haskell is used in few other, minor places. Most notable one is GIF image
   parsing, although displaying of images may not work very well.

 - Quality of Haskell code is low, which reflects my current knowledge of the
   language. The most advanced feature that I use right now with some level
   of confidence is probably fmap. Few commit messages explicitly mention
   commits of "ugly" Haskell code. Many other places are ugly too.

 - The good news is that there are some unit tests: mostly HUnit, but there
   is also some QuickCheck code. I will keep adding more unit tests as I
   write new code and improve or modify existing one.

 - This project contains many references to dillo, and some of them should be
   removed in the future. One example is the name of the executable binary
   file.

 - hello is not the most user-friendly web browser. You will need to manually
   start 'dpid' binary from original dillo package (sic!), and then use
   'run.sh' script from repo's main dir to open a page (i.e. "./run.sh
   <URL>").

 - hello has been tested with two relatively simple web sites that I won't
   name here. Don't expect too much from the program.

 - The project is NOT using stack or cabal as build tool. Learning these
   tools is not my main focus now.

 - The project is NOT using any Haskell libraries beyond Prelude and some
   basic libraries (e.g. Data.Map). CSS parsing code is written from scratch
   and looks very much like original C code. This is intentional: I want to
   see how much more compact Haskell code can become compared to C & C++
   code. I also don't want to focus on learning any particular parsing
   library or any other specialized library. That may come later.

 - The project is using FFI. The quality of the FFI is not top-notch. There
   may be some memory leaks, and the performance perhaps could be better. But
   the boundary between Haskell code and C & C++ code is constantly shifting,
   and I don't want to spend too much time tweaking things that are in
   constant flux.




2021.01.05

 - First commit of code from dillo-3.0.5.tar.bz2.

